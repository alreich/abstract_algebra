Abstract Algebras
=================

This Python module is a work-in-progress. Currently it contains a
representation of **finite groups**, along with related functionality,
such as the computation of *subgroups* of a group and whether two groups
are *isomorphic*.

Internally, the (finite) Group object consists of four quantities:

- **name**: (``str``) A short name for the Group;
- **description**: (``str``) Any additional, useful information about the Group;
- **element_names**: (``list`` of ``str``) The Group’s element names, where the
  first element in the list is the Group’s identity element (usually denoted by ``e``);
- **mult_table**: (``list`` of ``list`` of ``int``) The Group’s multiplication
  table, where each list in the list represents a row of the table, and
  each integer represents the position of an element in ‘element_names’.
  The table must be:

  - Square. The row & column length equal the number of elements, say, n;
  - The first row and first column should be the [0, 1, 2, …, n-1], in that exact order;
  - Every row and column should contain the same integers, in a different order,
    so that no row or column contains the same integer twice.

A Group object can be instantiated in several ways:

1. Enter **four values** corresponding to the quantities described above, in
   the order shown above.
2. Enter **three values** corresponding to ``name``, ``description``, and ``mult_table``,
   where ``mult_table`` uses element names (``str``) instead of ``int`` positions.
   The string-based ``mult_table`` must follow rules, similar to those described
   above:

   - The identity element comes first in the first row and first column;
   - The order of names in the first row and first column should be identical;
   - No row or column contains the same element name twice.
3. Enter a **Python dictionary**, with keys and values corresponding to
   either the four value or three value input schemes, described above.
4. Enter the **path to a JSON file** (``str``) that corresponds to the
   dictionary described above in 3.


Links
-----

- GitHub: https://github.com/alreich/abstract_algebra
- Documentation: https://abstract-algebra.readthedocs.io


Installation
------------

This module runs under Python 3.7+ and requires **numpy**.

Clone the github repository to install:

.. code:: bash

    $ git clone https://github.com/alreich/abstract_algebra.git


Add the *abstract_algebra* directory to your **PYTHONPATH**.

If you want to use any of the pre-built groups in this module (in the **Algebras** directory) it is
suggested that you define an environment variable (e.g., **PYPROJ**) that points to the directory
containing the *abstract_algebra* directory. An example of how this is useful is depicted farther below.


Quick Overview
--------------

.. code:: python

    >>> import os

    >>> from algebras import Group

    >>> z3 = Group('Z3',
                   'Cyclic group of order 3',
                   [[ 'e' ,  'a' , 'a^2'],
                    [ 'a' , 'a^2',  'e' ],
                    ['a^2',  'e' ,  'a' ]]
                   )

    >>> z3
    Group('Z3',
    'Cyclic group of order 3',
    ['e', 'a', 'a^2'],
    [[0, 1, 2], [1, 2, 0], [2, 0, 1]]) 


Instantiation of a group defined in JSON format, contained in the algebras
directory, is depicted below, and assumes that there is an environment
variable, **PYPROJ**, that points to the directory containing the
abstract_algebra directory.

.. code:: python

    >>> aa_path = os.path.join(os.getenv('PYPROJ'), 'abstract_algebra')

    >>> alg_dir = os.path.join(aa_path, "Algebras")

    >>> v4_json = os.path.join(alg_dir, "v4_klein_4_group.json")

    >>> v4 = Group(v4_json)

    >>> v4
    Group('V4',
    'Klein-4 group',
    ['e', 'h', 'v', 'hv'],
    [[0, 1, 2, 3], [1, 0, 3, 2], [2, 3, 0, 1], [3, 2, 1, 0]])


Calling the pretty-print method, ``pprint``, with its single argument set to ``True`` will print the multiplication table using element names, rather than the positions of element names in the element name list:

.. code:: python

    >>> v4.pprint(True)
    Group('V4',
    'Klein-4 group',
    [['e', 'h', 'v', 'hv'],
     ['h', 'e', 'hv', 'v'],
     ['v', 'hv', 'e', 'h'],
     ['hv', 'v', 'h', 'e']]
    )


Algebra elements can be *multiplied* using the Group method, ``mult``.

.. code:: python

    >>> v4.mult('h', 'v')
    'hv'

    >>> v4.mult('hv', 'v')
    'h'

    >>> v4.mult('v', 'hv')
    'h'


A group can be tested to determine if it's **abelian**:

.. code:: python

    >>> v4.abelian()
    True


An elements inverse can be obtained using the ``inverse`` method:

.. code:: python

    >>> v4.inverse('hv')
    'hv'


A **cyclic group** of any order can be automatically generated:

.. code:: python

    >>> from algebras import generate_cyclic_group

    >>> z4 = generate_cyclic_group(4)

    >>> z4
    Group('Z4',
    'Autogenerated cyclic group of order 4',
    ['e', 'a', 'a^2', 'a^3'],
    [[0, 1, 2, 3], [1, 2, 3, 0], [2, 3, 0, 1], [3, 0, 1, 2]]) 


The **direct product** of two or more groups can be generated using Python's multiplication operator, ``*``:

.. code:: python

    >>> z2 = generate_cyclic_group(2)

    >>> z2
    Group('Z2',
    'Autogenerated cyclic group of order 2',
    ['e', 'a'],
    [[0, 1], [1, 0]])

    >>> z2_x_z2 = z2 * z2

    >>> z2_x_z2
    Group('Z2_x_Z2',
    'Direct product of Z2 & Z2',
    ['e:e', 'e:a', 'a:e', 'a:a'],
    [[0, 1, 2, 3], [1, 0, 3, 2], [2, 3, 0, 1], [3, 2, 1, 0]])


If two groups are isomorphic, then the mapping between their elements is returned as a dictionary.

.. code:: python

    >>> v4.isomorphic(z2_x_z2)
    {'h': 'e:a', 'v': 'a:e', 'hv': 'a:a', 'e': 'e:e'}


If two groups are not isomorphic, then ``False`` is returned.

.. code:: python

    >>> z4.isomorphic(z2_x_z2)
    False


The proper subgroups of a group can also be computed.
**WARNING** Currently, this returns *ALL* subgroups, even ones that are isomorphic to each other.
This will be "fixed", soon, in a future release.

.. code:: python

    >>> z4.proper_subgroups()
    [Group('Z4_subgroup_0',
    'Subgroup of: Autogenerated cyclic group of order 4',
    ['e', 'a^2'],
    [[0, 1], [1, 0]]) ]


Further study
-------------


- Video: `"Abstract Algebra" <https://youtube.com/playlist?list=PLi01XoE8jYoi3SgnnGorR_XOW3IcK-TP6>`_
  by Socratica on YouTube

- Book: `"Visual Group Theory" <https://bookstore.ams.org/clrm-32>`_  by Nathan Carter

- Video: `"Visual Group Theory" <https://youtube.com/playlist?list=PLwV-9DG53NDxU337smpTwm6sef4x-SCLv>`_
  by Professor Macauley on YouTube (uses Carter's book, but "supplemented with content and rigor" for an
  undergraduate audience)

- `Group Explorer <https://nathancarter.github.io/group-explorer/index.html>`_ \-- Visualization
  software for the abstract algebra classroom


License
-------

*abstract_algebras* is distributed under the `MIT license`_.
