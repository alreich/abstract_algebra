===============
cayley_table.py
===============

class CayleyTable
    __init__(self, arr)
    __repr__(self)
    __str__(self)
    __eq__(self, other)
    __getitem__(self, tup)
    order(self)
    table(self)
    tolist(self)
    to_list_with_names(self, elements)
    is_associative(self)
    is_commutative(self)
    distributes_over(self, other, verbose=False)
    left_identity(self)
    right_identity(self)
    identity(self)
    has_inverses(self)
    inverse_lookup_dict(self, identity)
    about(self, printout=False)

about_tables(list_of_cayley_tables)

==================
finite_algebras.py
==================

class FiniteOperator
    __init__(self, elements, identity, table)
    __call__(self, *args)
    __binary_operation(self, elem1, elem2)
    __op(self, *args)

class FiniteAlgebra
    __init__(self, name, description)

class SingleElementSetAlgebra(FiniteAlgebra)
    __init__(self, name, description, elements, table)
    __eq__(self, other)
    __contains__(self, element)
    __getitem__(self, index)
    __repr__(self)
    __str__(self)
    deepcopy(self)
    dump(self, json_filename)
    dumps(self)
    elements(self)
    has_identity(self)
    has_inverses(self)
    identity(self)
    inv(self, element)
    is_abelian(self)
    is_associative(self)
    is_commutative(self)
    order(self)
    table(self)
    to_dict(self, include_classname=False)

class Magma(SingleElementSetAlgebra)
    __init__(self, name, description, elements, table)
    __mul__(self, other)  # Direct Product of two Magmas
    __element_mappings(self, other)
    __isomorphic_mapping(self, other, mapping)
    about(self, max_size=12, use_table_names=False)
    center(self)
    center_algebra(self, verbose=False)
    closed_subsets_of_elements(self, divisors_only, include_inverses)
    closure(self, subset_of_elements, include_inverses)
    direct_product_delimiter(self, delimiter=None)
    generators(self)
    is_cyclic(self)
    is_division_algebra(self, verbose=False)
    isomorphic(self, other)
    power(self, n)
    proper_subalgebras(self, divisors_only=True, include_inverses=True)
    reorder_elements(self, reordered_elements)
    subalgebra_from_elements(self, closed_subset_of_elements, name="No name", desc="No description")

class Semigroup(Magma)
    __init__(self, name, description, elements, table, check_inputs=True)
    is_regular(self)
    weak_inverses(self)

class Monoid(Semigroup)
    __init__(self, name, description, elements, table, check_inputs=True)
    __element_mappings(self, other)
    element_order(self, element)
    units(self, return_names=True)
    units_subgroup(self)

class Group(Monoid)
    __init__(self, name, description, elements, table, check_inputs=True)
    __create_inverse_lookup_dict(self)
    about(self, max_size=12, use_table_names=False)
    commutator(self, a, b)
    commutator_subgroup(self)
    commutators(self)
    conjugate(self, a, g)
    inv(self, element)
    inverse_mapping(self)
    is_normal(self, subgrp)
    sub(self, x, y)
    subgroups(self)
    trivial_subgroups(self)
    unique_proper_subgroups(self, subgroups=None)

about_isomorphic_partition(alg, part)
about_isomorphic_partitions(alg, partitions)
about_subalgebras(alg)
add_s(string, n)
are_n(n)
cosets(group, normal_subgroup)
generate_commutative_monoid(order, elem_name='a', name=None, description=None)
generate_cyclic_group(order, identity_name="e", elem_name="a", name=None, description=None)
generate_powerset_group(n, name=None, description=None)
generate_symmetric_group(n, name=None, description=None, base=1)
partition_into_isomorphic_lists(list_of_groups)

class Ring(Group)
    __init__(self, name, description, elements, table, table2, check_inputs=True)
    __repr__(self)
    about(self, max_size=12, use_table_names=False)
    add(self, *args)
    add_identity(self)
    add_table(self)
    commutator(self, a, b)
    extract_additive_algebra(self)
    extract_multiplicative_algebra(self)
    has_mult_identity(self)
    mult(self, *args)
    mult_identity(self)
    mult_is_commutative(self)
    mult_table(self)
    one(self)
    units(self, return_names=True, verbose=False)
    zero(self)
    zero_divisors(self)

__filter_out_conflicts(perms, perm, n)
__no_conflict(p1, p2)
__no_conflicts(items)
generate_all_group_tables(order)
generate_powerset_ring(n, name=None, description=None)
get_int_forms(ref_group, isomorphisms)
get_integer_form(elem_list)
is_field(add_id, elements, table)
is_table_associative(table)
tables_to_groups(tables, identity_name="e", elem_name="a")

class Field(Ring)
    __init__(self, name, description, elements, table, table2, check_inputs=True, mult_sub_grp=None)
    __eq__(self, other)
    div(self, x, y)
    mult_abelian_subgroup(self)
    mult_inv(self, element)

generate_algebra_mod_n(n, elem_name='a', name=None, description=None)
module_dot_product(ring, vec1, vec2)
module_sv_mult(ring)

class MultipleElementSetAlgebra(FiniteAlgebra)

class Module(MultipleElementSetAlgebra)
    __init__(self, name, description, ring, group, operator)
    __repr__(self)
    about(self, max_size=12, use_table_names=False)
    vector_add(self, v1, v2)

class VectorSpace(Module)
    __init__(self, name, description, field, group, operator)

class NDimensionalModule(Module)
    __init__(self, ring, n, check_input_conditions=True)
    dimensions(self)
    dot_product(self, u, v)
    origin(self)

class NDimensionalVectorSpace(VectorSpace)
    __init__(self, field, n, check_input_conditions=True)
    dimensions(self)
    dot_product(self, u, v)
    origin(self)

check_associativity(ring, group, sv_mult, verbose=False)
check_dist_of_scalars_over_vec_add(ring, group, sv_mult, verbose=False)
check_dist_of_vec_over_scalar_add(ring, group, sv_mult, verbose=False)
check_module_conditions(ring, group, sv_mult, verbose=False)
check_scaling_by_one(ring, group, sv_mult, verbose=False)
delete_row_col(np_arr, row, col)
divisors(n, non_trivial=False)
get_duplicates(lst)
get_name_desc_elements_table(finalg)
index_table_from_name_table(elements, name_table)
is_prime(n)
make_cayley_table(table, elements)
make_finite_algebra(*args)
make_table_from_xml(table_string)
powerset(iterable)
yes_or_no(true_or_false)

class Examples
    __init__(self, algebras_dir, filenames_json='examples.json')
    __len__(self)
    __getitem__(self, index)
    about(self)

===============
permutations.py
===============

class Perm
    __init__(self, permutation)
    __eq__(self, other)
    __hash__(self)
    __repr__(self)
    __len__(self)
    __mul__(self, other)

====================
test_cayley_table.py
====================

class TestCayleyTable(TestCase)
    setUp(self) -> None
    test_add_distributes_over_mult(self)
    test_cayley_table_to_list(self)
    test_cayley_table_to_list_with_names(self)
    test_cayley_table_to_str(self)
    test_equal(self)
    test_inverse_lookup_dict_1(self)
    test_inverse_lookup_dict_2(self)
    test_mult_distributes_over_add(self)
    test_table_associative(self)
    test_table_commutative(self)
    test_table_has_inverses(self)
    test_table_identity(self)
    test_table_left_id(self)
    test_table_order(self)
    test_table_right_id(self)

=======================
test_finite_algebras.py
=======================

class TestMagma(TestCase)
    setUp(self) -> None
    test_elements(self)
    test_identity(self)
    test_is_associative(self)
    test_is_commutative(self)
    test_make_finite_algebra_1(self)
    test_rps_is_not_associative(self)
    test_table(self)
    test_table_with_names(self)

class TestSemigroup(TestCase)
    setUp(self) -> None
    test_ex141_is_associative(self)
    test_fail_to_create_semigroup_from_rps(self)
    test_rps_has_no_identity(self)
    test_rps_is_associative(self)
    test_rps_is_not_commutative(self)

class TestGroup(TestCase)
    setUp(self) -> None
    test_direct_product_and_isomorphic(self)
    test_elements_accessor_ps3(self)
    test_elements_accessor_s3(self)
    test_elements_accessor_z4(self)
    test_identity_accessor_ps3(self)
    test_identity_accessor_s3(self)
    test_identity_accessor_z4(self)
    test_is_associative_ps3(self)
    test_is_associative_s3(self)
    test_is_associative_z4(self)
    test_is_commutative_ps3(self)
    test_is_commutative_s3(self)
    test_is_commutative_z4(self)
    test_not_isomorphic(self)
    test_table_accessor_ps3(self)
    test_table_accessor_s3(self)
    test_table_accessor_z4(self)

class TestRing(TestCase)
    setUp(self) -> None
    test_add(self)
    test_add_identity(self)
    test_has_mult_identity(self)
    test_mult(self)
    test_mult_identity(self)
    test_powerset_mult_table(self)
    test_ring_elements(self)
    test_ring_zero_divisors(self)

class TestPermutations(TestCase)
    setUp(self) -> None
    test_multiplication(self)
    test_mult_table_for_s3(self)
